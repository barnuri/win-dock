name: Build and Release

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Get current version
      id: current_version
      run: |
        CURRENT_VERSION=$(plutil -p WinDock/Info.plist | grep CFBundleShortVersionString | awk -F'"' '{print $4}')
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"
    
    - name: Calculate new version
      id: new_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
        
        # Split version into array
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Bump version based on type
        case $VERSION_TYPE in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
    
    - name: Update version in Info.plist
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        plutil -replace CFBundleShortVersionString -string "$NEW_VERSION" WinDock/Info.plist
        
        # Also update CFBundleVersion to match
        plutil -replace CFBundleVersion -string "$NEW_VERSION" WinDock/Info.plist
        
        echo "Updated Info.plist with version $NEW_VERSION"
       
    - name: Build app
      run: |
        echo "Building WinDock..."
        chmod +x build.sh
        ./build.sh
        
        # Verify the build was successful
        if [ ! -d "build/Build/Products/Release/WinDock.app" ]; then
          echo "Build failed - WinDock.app not found"
          exit 1
        fi
        
        echo "Build successful"
        ls -la build/Build/Products/Release/
    
    - name: Create DMG archive
      run: |
        cd build/Build/Products/Release
        
        # Create a temporary directory for DMG creation
        mkdir -p dmg_temp
        cp -R WinDock.app dmg_temp/
        
        # Create a symbolic link to Applications folder for easy installation
        ln -sf /Applications dmg_temp/Applications
        
        # Create the DMG file
        DMG_NAME="WinDock.dmg"
        hdiutil create -volname "WinDock ${{ steps.new_version.outputs.new_version }}" \
          -srcfolder dmg_temp \
          -ov \
          -format UDZO \
          -imagekey zlib-level=9 \
          "$DMG_NAME"
        
        # Move the DMG to the root directory for easier access
        mv "$DMG_NAME" ../../../../
        
        # Clean up temporary directory
        rm -rf dmg_temp
        
        cd ../../../../
        echo "Created DMG: $DMG_NAME"
        ls -la WinDock-*.dmg

    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add WinDock/Info.plist
        git commit -m "Bump version to ${{ steps.new_version.outputs.new_version }}"
        git push
    
    - name: Create release tag
      id: create_tag
      run: |
        TAG_NAME="v${{ steps.new_version.outputs.new_version }}"
        git tag $TAG_NAME
        git push origin $TAG_NAME
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "Created and pushed tag: $TAG_NAME"
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          # If no previous tag, get all commits
          COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD)
        else
          # Get commits since last tag
          COMMITS=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD^)
        fi
        
        # Create release notes
        RELEASE_NOTES="## What's Changed
        
        $COMMITS
        
        ## Installation
        
        1. Download \`WinDock.dmg\`
        2. Open the DMG file
        3. Drag \`WinDock.app\` to the Applications folder
        4. Run the app from Applications
        
        **Note:** You may need to allow the app in System Preferences > Security & Privacy if you get a security warning."
        
        # Save to file for use in release
        echo "$RELEASE_NOTES" > release_notes.md
        echo "Generated release notes"
    
    - name: Upload .app for release
      run: |
        # Copy the .app bundle to the root for upload
        cp -R build/Build/Products/Release/WinDock.app ./
        echo "Copied WinDock.app to root directory"

    - name: Create GitHub release with gh CLI
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME="${{ steps.create_tag.outputs.tag_name }}"
        RELEASE_NAME="WinDock ${{ steps.new_version.outputs.new_version }}"
        BODY_PATH="release_notes.md"
        DMG_FILE="WinDock.dmg"
        APP_FILE="WinDock.app"

        # Check if release already exists
        if gh release view "$TAG_NAME" > /dev/null 2>&1; then
          echo "Release $TAG_NAME already exists, updating..."
          gh release edit "$TAG_NAME" \
            --title "$RELEASE_NAME" \
            --notes-file "$BODY_PATH"
        else
          echo "Creating new release $TAG_NAME..."
          gh release create "$TAG_NAME" \
            "$DMG_FILE" "$APP_FILE" \
            --title "$RELEASE_NAME" \
            --notes-file "$BODY_PATH" \
            --verify-tag
        fi

        # Upload assets if not already present
        for asset in "$DMG_FILE" "$APP_FILE"; do
          if ! gh release view "$TAG_NAME" --json assets | grep -q "$asset"; then
            echo "Uploading $asset to release $TAG_NAME..."
            gh release upload "$TAG_NAME" "$asset" --clobber
          else
            echo "$asset already uploaded."
          fi
        done
    
    - name: Clean up
      run: |
        rm -f WinDock-*.dmg
        rm -f release_notes.md
        echo "Cleanup completed"
